#! /usr/bin/env python3

# yah2otx.py - Parsing Yahpot logs and sending malicious IP IOC to OTX
# by Srdjan Rajcevic https://github.com/rsrdjan

import argparse, os, sys, logging, socket, sqlite3, traceback
from datetime import datetime
from OTXv2 import OTXv2

# Defaults - no need to change
OTX_SERVER = 'https://otx.alienvault.com/'
PARSED_DB = "parsed.db"

# Logger config
log = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO, format='%(message)s')

# SQLs
createTable = """CREATE TABLE IF NOT EXISTS yahpotip (id INTEGER PRIMARY KEY NOT NULL, 
                ip TEXT, time REAL DEFAULT (datetime('now', 'localtime')));"""
insertIP = """INSERT INTO yahpotip (id, ip, time) VALUES (NULL, ?, ?);"""
selectIP = """SELECT * FROM yahpotip WHERE (ip = ?);"""

# Functions
def createPulse(pulseName, ioc):
    try:
        description = "Yahpot hits - {}".format(datetime.now())
        otx.create_pulse(
            name=pulseName, public=True, tlp="white", description=description,
            indicators=ioc, tags=['Yahpot'])
        log.info("[+] New pulse '{}' created".format(pulseName))
    except Exception as ex:
        log.info("[!] Couldn't create pulse '{}':".format(pulseName))
        log.info(ex)
    return getPulseID(pulseName)

def getPulseID(pulseName):
    try:
        socket.setdefaulttimeout(120)
        retries = 0
        while retries <= 5:
            try:
                retries+=1
                query='name:"{}"'.format(pulseName)
                pulses = otx.get_my_pulses(query=query)
                if pulses:
                    return pulses[0]['id']
                else:
                    return None
            except socket.timeout:
                log.error("[!] Cannot find pulse (timeout). Retrying")
            except AttributeError:
                log.error("[!] OTX server internal error")
        log.error("[i] Retry times ({}) exceeded. Exiting".format(retries))
        sys.exit(-1)
    except Exception:
        log.error("[!] Unknown error")
    finally:
        socket.setdefaulttimeout(5)
    return None

def extractIP(line, logType):
    list = line.split()
    if logType == "ylog":
        return list[0]
    else:
        if " yahpot " not in line:
            return None
        else:
            return list[6]

def findIP(ip, db):
    db.execute(selectIP, (ip,))
    if db.fetchone() is None:
        return False
    else:
        return True

def parseLogFile(logType, filePath, pulseName):
    pID = getPulseID(pulseName)
    numOfIPs = 0
    try:
        con = sqlite3.connect(PARSED_DB)
        cur = con.cursor()
        cur.execute(createTable)
        with open(filePath,"r") as fp:
            for line in fp.readlines():
                xip = extractIP(line, logType)
                if xip:
                    if pID == None:
                        pID = createPulse(pulseName, xip)           
                    if findIP(xip, cur) == False:
                        writeToDB(xip, cur)
                        con.commit()
                        ioc = [{'indicator': xip, 'type': 'IPv4', 'title': 'Generated by yah2otx (Yahpot)'}]
                        otx.add_pulse_indicators(pID,ioc)
                        log.info("[+] ip {}".format(xip))
                        numOfIPs+=1
                    else:
                        pass
        fp.close()
        con.close()
        log.info("[i] {} IOCs added. Database is up to date.".format(numOfIPs))
    except FileNotFoundError:
        log.error("[!] File {} not found!".format(filePath))
    except Exception:
        log.error(traceback.print_exc(file=sys.stdout))
    finally:
        sys.exit(-1)

def writeToDB(ip, db):
    db.execute(insertIP, (ip, datetime.now().date()))

# Main                        
parser = argparse.ArgumentParser(description="Parsing Yahpot logs and sending malicious IP IOC to OTX")
parser.add_argument("-l", "--log", help="Parse syslog OR yahpotlog file", choices=["syslog","ylog"], required=True)
parser.add_argument("logfile", help="Path to logfile", type=str)
parser.add_argument("pulse", help="Name of the pulse, will be created if doesn't exist", type=str)
args = parser.parse_args()

API_KEY = os.getenv("OTX_API_KEY")
if API_KEY == None:
    log.info("[i] No OTX_API_KEY environment variable found!\nYou need to set this variable before using {}.".format(sys.argv[0]))
    sys.exit(-1)
else:
    otx = OTXv2(API_KEY, server=OTX_SERVER)

    parseLogFile(args.log,args.logfile,args.pulse)
